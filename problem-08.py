# Utilizes the sliding window technique

n = '73167176531330624919225119674426574742355349194934969'      \
+ '835203127745063262395783180169848018694788518438586156078911' \
+ '294949545950173795833195285320880551112540698747158523863050' \
+ '715693290963295227443043557668966489504452445231617318564030' \
+ '987111217223831136222989342338030813533627661428280644448664' \
+ '523874930358907296290491560440772390713810515859307960866701' \
+ '724271218839987979087922749219016997208880937766572733300105' \
+ '336788122023542180975125454059475224352584907711670556013604' \
+ '839586446706324415722155395369781797784617406495514929086256' \
+ '932197846862248283972241375657056057490261407972968652414535' \
+ '100474821663704844031998900088952434506585412275886668811642' \
+ '717147992444292823086346567481391912316282458617866458359124' \
+ '566529476545682848912883142607690042242190226710556263211111' \
+ '093705442175069416589604080719840385096245544436298123098787' \
+ '992724428490918884580156166097919133875499200524063689912560' \
+ '717606058861164671094050775410022569831552000559357297257163' \
+ '6269561882670428252483600823257530420752963450'

def get_product(str_input, start_index, end_index):
    product = 1
    while start_index < end_index + 1:
        product = int(product) * int(str_input[start_index])
        start_index += 1
    return product

def find_biggest_product(str_input, num):
    max_product = get_product(str_input, 0, num - 1)
    next_product = max_product

    for j in range(len(str_input) - num):
        prev_digit = int(str_input[j])
        if int(str_input[j]) != 0:
            if next_product != 0:
                next_product = next_product / prev_digit * int(str_input[num + j])
        else:
            next_product = get_product(str_input, j + 1, num + j)
        max_product = max(max_product, next_product)

    return max_product

print(find_biggest_product(n, 13))
